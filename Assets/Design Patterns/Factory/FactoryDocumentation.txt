Pros and cons

You’ll benefit the most from the factory pattern when setting up many products.
Defining new product types in your application doesn’t change your existing
ones or require you to modify previous code.
Separating each product’s internal logic into its own class keeps the factory
code relatively short. Each factory only knows to invoke Initialize on each
product without being privy to the underlying details.
The downside is that you create a number of classes and subclasses to
implement the pattern. Like the other patterns, this introduces a bit of overhead,
which may be unnecessary if you don’t have a large variety of products.

Improvements

— Use a dictionary to search for products: You might want to store your
products as key-value pairs in a dictionary. Use a unique string identifier
(e.g., the Name or some ID) as the key and the type as a value. This
can make retrieving products and/or their corresponding factories more
convenient.
— Make the factory (or a factory manager) static: This makes it easier to use
but requires additional setup. Static classes won’t appear in the Inspector,
so you will need to make your collection of products static as well.
— Apply it to non-GameObjects and non-MonoBehaviours: Don’t limit
yourself to Prefabs or other Unity-specific components. The factory
pattern can work with any C# object.
— Combine with the object pool pattern: Factories don’t necessarily need
to instantiate or create new objects. They can also retrieve existing ones
in the hierarchy. If you are instantiating many objects at once, (e.g.,
projectiles from a weapon), use the object pool pattern for more optimized
memory management.