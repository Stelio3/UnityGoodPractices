Pros and cons
Implementing an event adds some extra work but does offer advantages:
— The observer pattern helps decouple your objects: The event publisher
does not need to know anything about the event subscribers themselves.
Instead of creating a direct dependency between one class and another,
the subject and observer communicate while maintaining a degree of
separation.
— You don’t have to build it: C# includes an established event system,
and you can use System.Action delegate instead of defining your own
delegates. Alternatively, Unity also includes UnityEvents and UnityActions.
— Each observer implements its own event handling logic: In this way, each
observing object maintains the logic it needs to respond. This makes it
easier to debug and unit test.
— It’s well-suited for user interface: Your core gameplay code can live
separately from your UI logic. Your UI elements then listen for specific
game events or conditions and respond appropriately. The MVP and MVC
patterns use the observer pattern for this purpose.
Be aware of these caveats for the observer pattern:
— It adds additional complexity: Like other patterns, creating event-driven
architecture does require more setup up front. Also, be careful deleting
subjects or observers. Make sure you unregister observers in OnDestroy.
— The observers need a reference to the class that defines the event:
Observers still have a dependency to the class that is publishing the
event. Using a static EventManager (below) that handles all events can
help disentangle objects from each other.
— Performance can be an issue: Event-driven architecture adds extra
overhead. Large scenes and many GameObjects can hinder performance.

Improvements
While only a basic version of the observer pattern is introduced here, you can
expand this to handle all of your game application’s needs.
Consider these suggestions when setting up the observer pattern:
— Use the ObservableCollection class: C# provides a dynamic
ObservableCollection to track specific changes. It can notify your
observers when items get added, removed, or when the list is refreshed.
— Pass a unique instance ID as an argument: Each GameObject in the
hierarchy has a unique instance ID. If you trigger an event that could
apply to more than one observer, pass the unique ID into the event (use
type Action<int>). Then only run the logic in the event handler if the
GameObject matches the unique ID.
— Create a static EventManager: Because events can drive much of your
gameplay, many Unity applications use a static or singleton EventManager.
This way, your observers can reference a central source of game events
as the subject to make setup easier.
The FPS Microgame has a good implementation of a static EventManager
which implements custom GameEvents and includes static helper methods
to add or remove listeners.
The Unity Open Project also showcases a game architecture that uses
ScriptableObjects to relay UnityEvents. It uses events to play audio or load
new scenes.
— Create an event queue: If you have a lot of objects in your scene, you
might not want to raise your events all at once. Imagine the cacophony of
a thousand objects playing back sounds when you invoke a single event.
Combining the observer pattern with the command pattern allows you
to encapsulate your events into an event queue. Then you can use a
command buffer to play back the events one at a time or selectively ignore
them as necessary (e.g., if you have a maximum number of objects that
can make sounds at once).